/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DeviceInfo } from "./DeviceInfo";
import { DeviceInfoCountArgs } from "./DeviceInfoCountArgs";
import { DeviceInfoFindManyArgs } from "./DeviceInfoFindManyArgs";
import { DeviceInfoFindUniqueArgs } from "./DeviceInfoFindUniqueArgs";
import { DeleteDeviceInfoArgs } from "./DeleteDeviceInfoArgs";
import { DeviceInfoService } from "../deviceInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DeviceInfo)
export class DeviceInfoResolverBase {
  constructor(
    protected readonly service: DeviceInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DeviceInfo",
    action: "read",
    possession: "any",
  })
  async _deviceInfosMeta(
    @graphql.Args() args: DeviceInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DeviceInfo])
  @nestAccessControl.UseRoles({
    resource: "DeviceInfo",
    action: "read",
    possession: "any",
  })
  async deviceInfos(
    @graphql.Args() args: DeviceInfoFindManyArgs
  ): Promise<DeviceInfo[]> {
    return this.service.deviceInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DeviceInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DeviceInfo",
    action: "read",
    possession: "own",
  })
  async deviceInfo(
    @graphql.Args() args: DeviceInfoFindUniqueArgs
  ): Promise<DeviceInfo | null> {
    const result = await this.service.deviceInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DeviceInfo)
  @nestAccessControl.UseRoles({
    resource: "DeviceInfo",
    action: "delete",
    possession: "any",
  })
  async deleteDeviceInfo(
    @graphql.Args() args: DeleteDeviceInfoArgs
  ): Promise<DeviceInfo | null> {
    try {
      return await this.service.deleteDeviceInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
