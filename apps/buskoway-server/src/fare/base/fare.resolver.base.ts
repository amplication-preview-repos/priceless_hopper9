/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Fare } from "./Fare";
import { FareCountArgs } from "./FareCountArgs";
import { FareFindManyArgs } from "./FareFindManyArgs";
import { FareFindUniqueArgs } from "./FareFindUniqueArgs";
import { DeleteFareArgs } from "./DeleteFareArgs";
import { FareService } from "../fare.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Fare)
export class FareResolverBase {
  constructor(
    protected readonly service: FareService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Fare",
    action: "read",
    possession: "any",
  })
  async _faresMeta(
    @graphql.Args() args: FareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Fare])
  @nestAccessControl.UseRoles({
    resource: "Fare",
    action: "read",
    possession: "any",
  })
  async fares(@graphql.Args() args: FareFindManyArgs): Promise<Fare[]> {
    return this.service.fares(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Fare, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Fare",
    action: "read",
    possession: "own",
  })
  async fare(@graphql.Args() args: FareFindUniqueArgs): Promise<Fare | null> {
    const result = await this.service.fare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Fare)
  @nestAccessControl.UseRoles({
    resource: "Fare",
    action: "delete",
    possession: "any",
  })
  async deleteFare(@graphql.Args() args: DeleteFareArgs): Promise<Fare | null> {
    try {
      return await this.service.deleteFare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
