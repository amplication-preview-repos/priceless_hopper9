/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TransportCard as PrismaTransportCard } from "@prisma/client";

export class TransportCardServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransportCardCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transportCard.count(args);
  }

  async transportCards<T extends Prisma.TransportCardFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportCardFindManyArgs>
  ): Promise<PrismaTransportCard[]> {
    return this.prisma.transportCard.findMany<Prisma.TransportCardFindManyArgs>(
      args
    );
  }
  async transportCard<T extends Prisma.TransportCardFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportCardFindUniqueArgs>
  ): Promise<PrismaTransportCard | null> {
    return this.prisma.transportCard.findUnique(args);
  }
  async createTransportCard<T extends Prisma.TransportCardCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportCardCreateArgs>
  ): Promise<PrismaTransportCard> {
    return this.prisma.transportCard.create<T>(args);
  }
  async updateTransportCard<T extends Prisma.TransportCardUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportCardUpdateArgs>
  ): Promise<PrismaTransportCard> {
    return this.prisma.transportCard.update<T>(args);
  }
  async deleteTransportCard<T extends Prisma.TransportCardDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TransportCardDeleteArgs>
  ): Promise<PrismaTransportCard> {
    return this.prisma.transportCard.delete(args);
  }
}
