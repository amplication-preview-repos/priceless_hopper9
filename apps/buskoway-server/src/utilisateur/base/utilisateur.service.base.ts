/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Utilisateur as PrismaUtilisateur } from "@prisma/client";

export class UtilisateurServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UtilisateurCountArgs, "select">
  ): Promise<number> {
    return this.prisma.utilisateur.count(args);
  }

  async utilisateurs<T extends Prisma.UtilisateurFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilisateurFindManyArgs>
  ): Promise<PrismaUtilisateur[]> {
    return this.prisma.utilisateur.findMany<Prisma.UtilisateurFindManyArgs>(
      args
    );
  }
  async utilisateur<T extends Prisma.UtilisateurFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilisateurFindUniqueArgs>
  ): Promise<PrismaUtilisateur | null> {
    return this.prisma.utilisateur.findUnique(args);
  }
  async createUtilisateur<T extends Prisma.UtilisateurCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilisateurCreateArgs>
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.create<T>(args);
  }
  async updateUtilisateur<T extends Prisma.UtilisateurUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilisateurUpdateArgs>
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.update<T>(args);
  }
  async deleteUtilisateur<T extends Prisma.UtilisateurDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UtilisateurDeleteArgs>
  ): Promise<PrismaUtilisateur> {
    return this.prisma.utilisateur.delete(args);
  }
}
