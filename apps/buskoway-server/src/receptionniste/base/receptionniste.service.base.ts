/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Receptionniste as PrismaReceptionniste } from "@prisma/client";

export class ReceptionnisteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReceptionnisteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.receptionniste.count(args);
  }

  async receptionnistes<T extends Prisma.ReceptionnisteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReceptionnisteFindManyArgs>
  ): Promise<PrismaReceptionniste[]> {
    return this.prisma.receptionniste.findMany<Prisma.ReceptionnisteFindManyArgs>(
      args
    );
  }
  async receptionniste<T extends Prisma.ReceptionnisteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReceptionnisteFindUniqueArgs>
  ): Promise<PrismaReceptionniste | null> {
    return this.prisma.receptionniste.findUnique(args);
  }
  async createReceptionniste<T extends Prisma.ReceptionnisteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReceptionnisteCreateArgs>
  ): Promise<PrismaReceptionniste> {
    return this.prisma.receptionniste.create<T>(args);
  }
  async updateReceptionniste<T extends Prisma.ReceptionnisteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReceptionnisteUpdateArgs>
  ): Promise<PrismaReceptionniste> {
    return this.prisma.receptionniste.update<T>(args);
  }
  async deleteReceptionniste<T extends Prisma.ReceptionnisteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReceptionnisteDeleteArgs>
  ): Promise<PrismaReceptionniste> {
    return this.prisma.receptionniste.delete(args);
  }
}
