/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Administrateur as PrismaAdministrateur } from "@prisma/client";

export class AdministrateurServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdministrateurCountArgs, "select">
  ): Promise<number> {
    return this.prisma.administrateur.count(args);
  }

  async administrateurs<T extends Prisma.AdministrateurFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdministrateurFindManyArgs>
  ): Promise<PrismaAdministrateur[]> {
    return this.prisma.administrateur.findMany<Prisma.AdministrateurFindManyArgs>(
      args
    );
  }
  async administrateur<T extends Prisma.AdministrateurFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdministrateurFindUniqueArgs>
  ): Promise<PrismaAdministrateur | null> {
    return this.prisma.administrateur.findUnique(args);
  }
  async createAdministrateur<T extends Prisma.AdministrateurCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdministrateurCreateArgs>
  ): Promise<PrismaAdministrateur> {
    return this.prisma.administrateur.create<T>(args);
  }
  async updateAdministrateur<T extends Prisma.AdministrateurUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdministrateurUpdateArgs>
  ): Promise<PrismaAdministrateur> {
    return this.prisma.administrateur.update<T>(args);
  }
  async deleteAdministrateur<T extends Prisma.AdministrateurDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdministrateurDeleteArgs>
  ): Promise<PrismaAdministrateur> {
    return this.prisma.administrateur.delete(args);
  }
}
