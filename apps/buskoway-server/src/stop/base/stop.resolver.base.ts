/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Stop } from "./Stop";
import { StopCountArgs } from "./StopCountArgs";
import { StopFindManyArgs } from "./StopFindManyArgs";
import { StopFindUniqueArgs } from "./StopFindUniqueArgs";
import { DeleteStopArgs } from "./DeleteStopArgs";
import { StopService } from "../stop.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Stop)
export class StopResolverBase {
  constructor(
    protected readonly service: StopService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Stop",
    action: "read",
    possession: "any",
  })
  async _stopsMeta(
    @graphql.Args() args: StopCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Stop])
  @nestAccessControl.UseRoles({
    resource: "Stop",
    action: "read",
    possession: "any",
  })
  async stops(@graphql.Args() args: StopFindManyArgs): Promise<Stop[]> {
    return this.service.stops(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Stop, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Stop",
    action: "read",
    possession: "own",
  })
  async stop(@graphql.Args() args: StopFindUniqueArgs): Promise<Stop | null> {
    const result = await this.service.stop(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Stop)
  @nestAccessControl.UseRoles({
    resource: "Stop",
    action: "delete",
    possession: "any",
  })
  async deleteStop(@graphql.Args() args: DeleteStopArgs): Promise<Stop | null> {
    try {
      return await this.service.deleteStop(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
