/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Stop as PrismaStop } from "@prisma/client";

export class StopServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.StopCountArgs, "select">): Promise<number> {
    return this.prisma.stop.count(args);
  }

  async stops<T extends Prisma.StopFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StopFindManyArgs>
  ): Promise<PrismaStop[]> {
    return this.prisma.stop.findMany<Prisma.StopFindManyArgs>(args);
  }
  async stop<T extends Prisma.StopFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StopFindUniqueArgs>
  ): Promise<PrismaStop | null> {
    return this.prisma.stop.findUnique(args);
  }
  async createStop<T extends Prisma.StopCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StopCreateArgs>
  ): Promise<PrismaStop> {
    return this.prisma.stop.create<T>(args);
  }
  async updateStop<T extends Prisma.StopUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StopUpdateArgs>
  ): Promise<PrismaStop> {
    return this.prisma.stop.update<T>(args);
  }
  async deleteStop<T extends Prisma.StopDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StopDeleteArgs>
  ): Promise<PrismaStop> {
    return this.prisma.stop.delete(args);
  }
}
