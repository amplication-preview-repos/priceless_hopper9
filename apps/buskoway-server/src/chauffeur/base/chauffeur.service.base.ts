/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Chauffeur as PrismaChauffeur } from "@prisma/client";

export class ChauffeurServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChauffeurCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chauffeur.count(args);
  }

  async chauffeurs<T extends Prisma.ChauffeurFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChauffeurFindManyArgs>
  ): Promise<PrismaChauffeur[]> {
    return this.prisma.chauffeur.findMany<Prisma.ChauffeurFindManyArgs>(args);
  }
  async chauffeur<T extends Prisma.ChauffeurFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChauffeurFindUniqueArgs>
  ): Promise<PrismaChauffeur | null> {
    return this.prisma.chauffeur.findUnique(args);
  }
  async createChauffeur<T extends Prisma.ChauffeurCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChauffeurCreateArgs>
  ): Promise<PrismaChauffeur> {
    return this.prisma.chauffeur.create<T>(args);
  }
  async updateChauffeur<T extends Prisma.ChauffeurUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChauffeurUpdateArgs>
  ): Promise<PrismaChauffeur> {
    return this.prisma.chauffeur.update<T>(args);
  }
  async deleteChauffeur<T extends Prisma.ChauffeurDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ChauffeurDeleteArgs>
  ): Promise<PrismaChauffeur> {
    return this.prisma.chauffeur.delete(args);
  }
}
