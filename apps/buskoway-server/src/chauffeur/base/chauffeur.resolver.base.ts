/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Chauffeur } from "./Chauffeur";
import { ChauffeurCountArgs } from "./ChauffeurCountArgs";
import { ChauffeurFindManyArgs } from "./ChauffeurFindManyArgs";
import { ChauffeurFindUniqueArgs } from "./ChauffeurFindUniqueArgs";
import { DeleteChauffeurArgs } from "./DeleteChauffeurArgs";
import { ChauffeurService } from "../chauffeur.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Chauffeur)
export class ChauffeurResolverBase {
  constructor(
    protected readonly service: ChauffeurService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Chauffeur",
    action: "read",
    possession: "any",
  })
  async _chauffeursMeta(
    @graphql.Args() args: ChauffeurCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Chauffeur])
  @nestAccessControl.UseRoles({
    resource: "Chauffeur",
    action: "read",
    possession: "any",
  })
  async chauffeurs(
    @graphql.Args() args: ChauffeurFindManyArgs
  ): Promise<Chauffeur[]> {
    return this.service.chauffeurs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Chauffeur, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Chauffeur",
    action: "read",
    possession: "own",
  })
  async chauffeur(
    @graphql.Args() args: ChauffeurFindUniqueArgs
  ): Promise<Chauffeur | null> {
    const result = await this.service.chauffeur(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Chauffeur)
  @nestAccessControl.UseRoles({
    resource: "Chauffeur",
    action: "delete",
    possession: "any",
  })
  async deleteChauffeur(
    @graphql.Args() args: DeleteChauffeurArgs
  ): Promise<Chauffeur | null> {
    try {
      return await this.service.deleteChauffeur(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
