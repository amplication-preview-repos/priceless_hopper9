/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Incident as PrismaIncident } from "@prisma/client";

export class IncidentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IncidentCountArgs, "select">): Promise<number> {
    return this.prisma.incident.count(args);
  }

  async incidents<T extends Prisma.IncidentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncidentFindManyArgs>
  ): Promise<PrismaIncident[]> {
    return this.prisma.incident.findMany<Prisma.IncidentFindManyArgs>(args);
  }
  async incident<T extends Prisma.IncidentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncidentFindUniqueArgs>
  ): Promise<PrismaIncident | null> {
    return this.prisma.incident.findUnique(args);
  }
  async createIncident<T extends Prisma.IncidentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncidentCreateArgs>
  ): Promise<PrismaIncident> {
    return this.prisma.incident.create<T>(args);
  }
  async updateIncident<T extends Prisma.IncidentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncidentUpdateArgs>
  ): Promise<PrismaIncident> {
    return this.prisma.incident.update<T>(args);
  }
  async deleteIncident<T extends Prisma.IncidentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IncidentDeleteArgs>
  ): Promise<PrismaIncident> {
    return this.prisma.incident.delete(args);
  }
}
