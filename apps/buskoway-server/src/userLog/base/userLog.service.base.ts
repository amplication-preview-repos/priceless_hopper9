/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserLog as PrismaUserLog } from "@prisma/client";

export class UserLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserLogCountArgs, "select">): Promise<number> {
    return this.prisma.userLog.count(args);
  }

  async userLogs<T extends Prisma.UserLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLogFindManyArgs>
  ): Promise<PrismaUserLog[]> {
    return this.prisma.userLog.findMany<Prisma.UserLogFindManyArgs>(args);
  }
  async userLog<T extends Prisma.UserLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLogFindUniqueArgs>
  ): Promise<PrismaUserLog | null> {
    return this.prisma.userLog.findUnique(args);
  }
  async createUserLog<T extends Prisma.UserLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLogCreateArgs>
  ): Promise<PrismaUserLog> {
    return this.prisma.userLog.create<T>(args);
  }
  async updateUserLog<T extends Prisma.UserLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLogUpdateArgs>
  ): Promise<PrismaUserLog> {
    return this.prisma.userLog.update<T>(args);
  }
  async deleteUserLog<T extends Prisma.UserLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserLogDeleteArgs>
  ): Promise<PrismaUserLog> {
    return this.prisma.userLog.delete(args);
  }
}
